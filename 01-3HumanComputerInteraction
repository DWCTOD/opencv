import cv2
import numpy as np


# 当鼠标按下时变为 True
drawing = False
# 如果mode为True绘制矩形。按下‘m’变成绘制曲线
mode = True
ix, iy = -1,-1


# 创建回调函数
def draw_circle(event, x, y, flags, param):
    global ix, iy, drawing, mode
# 当按下左键是返回起始位置坐标
    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        ix, iy = x, y
# 当鼠标左键按下并移动是绘制图形。event 可以查看移动，flag查看是否按下
    elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_FLAG_LBUTTON:
        if drawing == True:
            if mode == True:
                cv2.rectangle(img,(ix, iy),(x,y),(0,255,0),-1)
            else:
                # 绘制圆圈，小圆点连在一起就是线，3代表了线的粗细
                cv2.circle(img, (x,y),3,(0,0,255),-1)
                # 下面注释的代码是起始点为圆心，起点到终点为半径的
                # r = int(np.sqrt((x-ix)**2+(y-iy)**2))
                # cv2.circle(img,(x,y),r,(0,0,255),-1)
    # 当鼠标松开停止绘图。
    elif event == cv2.EVENT_LBUTTONUP:
        drawing == False
        # if mode == True:
        #     cv2.rectangle(img,(ix,iy),(x,y),(0,255,0),-1)
        # else:
        #     cv2.circle(img,(x,y),5,(0,0,255),-1)


img = np.zeros((512,512,3),np.uint8)
cv2.namedWindow('image')
cv2.setMouseCallback('image', draw_circle)
while(1):
    cv2.imshow('image',img)
    # waitkey，这个函数是在一个给定的时间内（ms）等待用户按键触发，
    # 如果用户没有按下键则循环
    # 关于这块的详细解释https://blog.csdn.net/farmwang/article/details/74170975
    k = cv2.waitKey(1)&0xFF
    if k == ord('m'):
        mode = not mode
    # k == 27的是按下ESC（ASCII是27）跳出循环
    elif k == 27:
        break


